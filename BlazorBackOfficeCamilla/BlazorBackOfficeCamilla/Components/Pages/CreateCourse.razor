@page "/create-course"


@inject CourseService CourseService
@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Create Course</h3>

<section class="admincourse">
    <div class="container">
        @if (!string.IsNullOrWhiteSpace(statusMessage))
        {
            <p>@statusMessage</p>
        }

        <EditForm Model="course" FormName="createcourse" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText @bind-Value="course.Title" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Image URI</label>
                <InputText @bind-Value="course.ImageUri" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Image Header URI</label>
                <InputText @bind-Value="course.ImageHeaderUri" class="form-control" />
            </div>

            <div class="checkbox-group">
                <div class="checkbox">
                    <InputCheckbox @bind-Value="course.IsDigital" type="checkbox" id="checkDigital" class="form-check-input" />
                    <label class="form-check-label">Is digital</label>
                </div>
                <div class="checkbox">
                    <InputCheckbox @bind-Value="course.IsBestseller" type="checkbox" id="checkBest" class="form-check-input" />
                    <label class="form-check-label">Is bestseller</label>
                </div>
            </div>

            <InputSelect @bind-Value="categories" list="browsers" class="form-select" id="floatingSelect" aria-label="Choose category">
                <option value="categories" selected disabled></option>
                <option value="App Development">App Development</option>
                <option value="Frontend Development">Frontend Development</option>
                <option value="Backend Devlopment">Backend Devlopment</option>
            </InputSelect>

            <div class="mb-3">
                <label class="form-label">Ingress</label>
                <InputTextArea @bind-Value="course.Ingress" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Star Rating</label>
                <InputNumber @bind-Value="course.StarRating" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Reviews</label>
                <InputText @bind-Value="course.Reviews" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Likes</label>
                <InputText @bind-Value="course.Likes" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Likes In Percent</label>
                <InputText @bind-Value="course.LikesInProcent" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Hours</label>
                <InputText @bind-Value="course.Hours" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Authors</label>
                    @foreach (var author in course.Authors)
                    {
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="author.Name" class="form-control" />
                            <label class="form-label">Author Image</label>
                            <InputText @bind-Value="author.AuthorImage" class="form-control" />
                            <button type="button" class="btn-gray btn mt-2" @onclick="() => RemoveAuthor(author)">Remove</button>
                        </div>
                    }
                
                <button class="btn-gray btn" type="button" @onclick="AddAuthor">Add Author</button>
            </div>

            <div class="mb-3">
                <label class="form-label">Prices</label>
                <div class="mb-3">
                    <label class="form-label">Currency</label>
                    <InputText @bind-Value="course.Prices.Currency" class="form-control" />
                    <label class="form-label">Price</label>
                    <InputNumber @bind-Value="course.Prices.Price" class="form-control" />
                    <label class="form-label">Discount</label>
                    <InputNumber @bind-Value="course.Prices.Discount" class="form-control" />
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Content</label>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <InputTextArea @bind-Value="course.Content.Description" class="form-control" />
                    <label class="form-label">Includes</label>
                    <InputText @bind-Value="includesText" class="form-control" />
                    <label class="form-label">Program Details</label>

                        @foreach (var detail in course.Content.ProgramDetails)
                        {
                            <div class="mb-3">
                                <label class="form-label">Title</label>
                                <InputText @bind-Value="detail.Title" class="form-control" />
                                <label class="form-label">Description</label>
                                <InputTextArea @bind-Value="detail.Description" class="form-control" />
                                <button class="btn-gray btn mt-2" type="button" @onclick="() => RemoveProgramDetail(detail)">Remove</button>
                            </div>
                        }
                    

                    <button class="btn-gray btn" type="button" @onclick="AddProgramDetail">Add Program Detail</button>
                </div>
            </div>
            <button type="submit" class="btn-theme btn">Create Course</button>
        </EditForm>

    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    private string statusMessage { get; set; } = "";

    private Course course = new Course();

    [SupplyParameterFromForm(Name = "categories")]
    private string categories { get; set; }

    [SupplyParameterFromForm(Name = "includesText")]
    private string includesText { get; set; }


    private async Task HandleValidSubmit()
    {
        course.Categories = categories?.Split(',').Select(c => c.Trim()).ToArray();
        course.Content.Includes = includesText?.Split(',').Select(i => i.Trim()).ToArray();

        var result = await CourseService.RequestCreateCourseAsync(course);
        if (result != null)
        {
            statusMessage = "Course created successfully";
            ResetCourse();
        }
    }

    private void AddAuthor()
    {
        course.Authors.Add(new Author());
    }
    private void RemoveAuthor(Author author)
    {
        course.Authors.Remove(author);
    }

    private void AddProgramDetail()
    {
        course.Content.ProgramDetails.Add(new ProgramDetail());
    }
    private void RemoveProgramDetail(ProgramDetail programDetail)
    {
        course.Content.ProgramDetails.Remove(programDetail);
    }
    private void ResetCourse()
    {
        course = new Course
            {
                Authors = new List<Author>(),
                Prices = new Prices(),
                Content = new Content
                {
                    ProgramDetails = new List<ProgramDetail>()
                }
            };
        categories = string.Empty;
        includesText = string.Empty;
    }
}
