@page "/manageadmin"
@attribute [StreamRendering]
@rendermode InteractiveServer

@attribute [Authorize(Roles = "SuperAdmin, CIO")]



<section class="manageadmin">
    <div class="container">

        <h3>ManageAdmin</h3>
        @if (!String.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-success" role="alert">
                @StatusMessage
            </div>
        }

        @if (userAdminForms != null)
        {
            @foreach (var userAdminForm in userAdminForms)
            {
                <div class="users">
                <h5>User: @userAdminForm.FirstName @userAdminForm.LastName</h5>
                <EditForm Model="userAdminForm" OnValidSubmit="@(() => UpdateRoles(userAdminForm))" novalidate>
                    <InputText type="hidden" @bind-Value="userAdminForm.UserId" />
                    <div class="checkbox-group">

                        <div class="mb-3 checkbox">
                            <label>User</label>
                            <InputCheckbox @bind-Value="userAdminForm.IsUser" />
                        </div>
                        <div class="mb-3 checkbox">
                            <label>Admin</label>
                            <InputCheckbox @bind-Value="userAdminForm.IsAdmin" />
                        </div>
                        <div class="mb-3 checkbox">
                            <label>CIO</label>
                            <InputCheckbox @bind-Value="userAdminForm.IsCIO" />
                        </div>
                        <div class="mb-3 checkbox">
                            <label>SuperAdmin</label>
                            <InputCheckbox @bind-Value="userAdminForm.IsSuperAdmin" />
                        </div>
                    </div>

                    <button type="submit" class="btn btn-theme">Update roles</button>
                </EditForm>
                </div>

            }
        }
        else
        {
            <div><i class="fa-sharp fa-solid fa-spinner-third fa-spin"></i></div>
        }
    </div>
</section>


@code {
    private List<UserAdminForm> userAdminForms;

    private string StatusMessage { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<IEnumerable<UsersWithRolesDisplay>>("https://userprovider-silicon-camilla.azurewebsites.net/api/GetUsersWithRoles?code=eRBUl6LEZnKxyypSfH0poNdAYF384aBVBxb3z1mOLRCZAzFu0NZGCg%3D%3D");
            if (response != null)
            {
                userAdminForms = new List<UserAdminForm>();
                foreach (var roleAndUser in response)
                {
                    userAdminForms.Add(new UserAdminForm
                        {
                            FirstName = roleAndUser.FirstName,
                            LastName = roleAndUser.LastName,
                            UserId = roleAndUser.Id,
                            IsAdmin = roleAndUser.Roles.Contains("Admin"),
                            IsUser = roleAndUser.Roles.Contains("User"),
                            IsSuperAdmin = roleAndUser.Roles.Contains("SuperAdmin"),
                            IsCIO = roleAndUser.Roles.Contains("CIO")
                        });
                }
            }
            else
            {
                StatusMessage = "No users found";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"{ex.Message}";
        }
    }

    public async Task UpdateRoles(UserAdminForm userAdminForm)
    {
        var response = await Http.PostAsJsonAsync($"https://userprovider-silicon-camilla.azurewebsites.net/api/UpdateUserRoles?code=bF5sEwrgkH14aSzCpOB3L-HG4ddg0Ul5hWbr1ZDueSAhAzFuq4A7tA%3D%3D", userAdminForm);
        if (response.IsSuccessStatusCode)
        {
            StatusMessage = "Roles updated";
            await OnInitializedAsync();
        }
        else
        {
            StatusMessage = "Roles not updated";
        }
    }

}
